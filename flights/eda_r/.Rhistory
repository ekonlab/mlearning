library(tidyr)
setwd("/Users/albertogonzalez/Dropbox/work_17/bestiario/Mark")
# Import Natgeo water data set and have a initial overiew
natgeo_water = read.csv("natgeo_water_refined.csv")
str(natgeo_water)
eth_df = natgeo_water %>%
filter(iso == "ETH")
# And now we are going to build our first line chart to try to answer the question
g1 = ggplot(eth_df,aes(year,rural_water_imp_per)) + geom_line() + theme_minimal() + ggtitle("Percentage of rural population in Ethiopia with access to clean water from 1990 to 2015") +  xlab("years") + ylab("% of rural population with access to clean water")
g1
g1
sub_saharan_df = natgeo_water %>%
filter(region == "Sub-Saharan Africa")
sub_saharan_init = sub_saharan_df %>%
filter(year == 1990)
g4 = ggplot(sub_saharan_init,aes(x = reorder(country,-rural_water_imp_per),y = rural_water_imp_per)) + geom_bar(stat = "identity") + theme_minimal() + ggtitle("Percentage of rural population in Sub-Saharan Africa countries with access to clean water in 1990") +  xlab("countries") + ylab("% of rural population with access to clean water")
g4
sub_saharan_last = sub_saharan_df %>%
filter(year == 2015)
years = c(1990,2015)
sub_saharan_compare = sub_saharan_df %>%
filter(year %in% years)
sub_saharan_compare$year = as.factor(as.numeric(sub_saharan_compare$year))
select("country","year","rural_water_imp_per")
compare_df = sub_saharan_compare %>%
select("country","year","rural_water_imp_per")
# Convert year to wide format using "spread"
# formula = (data,key,value)
compare_df_wide = spread(compare_df,"year","rural_water_imp_per")
compare_df_wide$diff = compare_df_wide$`2015` - compare_df_wide$`1990`
g5_b = ggplot(compare_df_wide,aes(x = reorder(country,-diff),y = diff)) + geom_bar(stat = "identity") + theme_minimal() + ggtitle("% of rural population in Sub-Saharan Africa countries with access to clean water (2015 - 1990)") +  xlab("countries") + ylab("% 2015 - % 1990")
g5_b
years_2 = c(1995,2010)
sub_saharan_compare_2 = sub_saharan_df %>%
filter(year %in% years_2)
sub_saharan_compare_2$year = as.factor(as.numeric(sub_saharan_compare_2$year))
compare_df_2 = sub_saharan_compare_2 %>%
select("country","year","rural_water_imp_per")
# Convert year to wide format using "spread"
# formula = (data,key,value)
compare_df_wide_2 = spread(compare_df_2,"year","rural_water_imp_per")
compare_df_wide_2$diff = compare_df_wide_2$`2010` - compare_df_wide_2$`1995`
head(compare_df_wide_2)
g5_c = ggplot(compare_df_wide_2,aes(x = reorder(country,-diff),y = diff)) + geom_bar(stat = "identity") + theme_minimal() + ggtitle("% of rural population in Sub-Saharan Africa countries with access to clean water (2010 - 1995)") +  xlab("countries") + ylab("% 2010 - % 1995")
g5_c
knitr::opts_chunk$set(echo = TRUE)
library(rjson)
library(dplyr)
setwd("/Users/albertogonzalez/Documents/GitHub/mlearning/flights/middle_east")
# Load first file
input_file = fromJSON(file="flights.json")
df1 = as.data.frame(input_file)
str(df1)
# Load first file
input_file = fromJSON(file="flights.json",nullValue = NA)
# Load first file
input_file = fromJSON(file="flights.json")
# Convert to dataframe
df = do.call("rbind.fill", lapply(json_data, as.data.frame))
# Convert to dataframe
df = do.call("rbind.fill", lapply(input_file, as.data.frame))
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
library(rjson)
library(plyr)
library(dplyr)
library(tidyr)
library(ggmap)
library(ggplot2)
setwd("/Users/albertogonzalez/Documents/GitHub/mlearning/flights/eda_r")
list.files()
```{r, message=FALSE}
library(rjson)
library(plyr)
library(dplyr)
library(tidyr)
library(ggmap)
library(ggplot2)
setwd("/Users/albertogonzalez/Documents/GitHub/mlearning/flights/eda_r")
list.files()
read.csv(file = "flights_output_take_one.csv")
input_file =read.csv(file = "flights_output_take_one.csv")
head()
head(input_file)
head(input_file)
u_flights = unique(input_file$adshex)
length(u_flights)
head(u_flights)
head(u_flights)
one_flight = input_file %>%
filter(adshex=="1053f4b3")
str(one_flight)
head(one_flight)
head(one_flight)
# Flight segments per flight
segments = unique(one_flight$flight_id)
str(segments)
length(segments)
# Max and min timestamp
init = min(one_flight$timestamp)
init
end = max(one_flight$timestamp)
end
dura = end-init
dura
library(lubridate)
dura = difftime(init,end,units="mins")
?difftine
library(lubridate)
?difftine
?difftine()
?difftime()
init = as.POSIXct(init/1000, origin="1970-01-01")
init
init = as.POSIXct(init, origin="1970-01-01")
init
# Max and min timestamp
init = min(one_flight$timestamp)
iit
init
print(as.numeric(Sys.time()))
library(anytime)
install.packages("anytime")
library(anytime)
# Max and min timestamp
init = min(one_flight$timestamp)
init = anytime(init)
init
end = anytime(end)
dura = difftime(init,end,units="mins")
dura
end
dura = difftime(end,init,units="mins")
dura
head(one_flight)
# Calculate steer: change in compass from previous transponder
# Calculated over track
head(one_flight)
steer = apply(one_flight , 10 , diff )
steer = apply(one_flight , 9 , diff )
steer = diff(one_flight$track)
head(steer)
head(one_flight,10)
head(steer,10)
length(steer)
# Calculate boxes: For each flight:
# boxes Area of a rectangular bounding box drawn around each flight segment, in square kilometers
bbox <- make_bbox(lon = one_flight$lng, lat = one_flight$lat, f = .1)
bbox
class(bbox)
xy <- one_flight[,c(2,3)]
hea(xy)
head(xy)
xy <- one_flight[,c(3,4)]
head(xy)
library(sp)
spdf <- SpatialPointsDataFrame(coords = xy, data = mydf,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
spdf <- SpatialPointsDataFrame(coords = xy, data = one_flight,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
class(spdf)
library(tmaptools)
install.packages("tmaptools")
library(tmaptools)
# Calculate area in sq2
area = approx_areas(spdf,target = "metric")
class(xy)
spat = SpatialPolygonsDataFrame(xy)
dura
head(spdf)
bbox
head8xy
head(xy)
library(SpatialEpi)
install.packages("SpatialEpi")
library(SpatialEpi)
min_coord = min(xy)
min_coord
tail(xy)
min_coord = head(xy,1)
min_coord
max_coord = tail(xy,1)
max_coord
coords = data.frame(rbind(min_coord,max_coord))
coords
area = latlong2grid(coord)
area = latlong2grid(coords)
area
area
class8area
class(area)
spat = SpatialPolygonsDataFrame(area)
spat = SpatialPolygonsDataFrame(coords)
library(Imap)
install.packages("Imap")
library(Imap)
min_coord
area = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area
area = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "km2", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area
area = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area
area = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "m", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area
area_meters = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "m", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
bbox
area_km2 = area_meters * 0.000001
area_km2
head(input_file)
head(u_flights)
one_flight = input_file %>%
filter(adshex=="10534350")
str(one_flight)
head(one_flight)
# Flight segments per flight
segments = unique(one_flight$flight_id)
str(segments)
segments
one_flight
init = min(one_flight$timestamp)
init = anytime(init)
end = max(one_flight$timestamp)
end = anytime(end)
dura = difftime(end,init,units="mins")
dura
area_km2
area_meters
area_km2 = area_meters / 1000
area_km2
head(input_file)
head(input_file)
sample_df = sample_n(input_file, 500)
str(sample_df)
dim(input_file)
dur_df = sample_df %>%
group_by(adshex) %>%
summarise(start = min(timestamp))
head(dur_df)
dur_df = sample_df %>%
group_by(adshex) %>%
summarise(start = min(timestamp)) %>%
mutate(start_2) = anytime(start)
dur_df = sample_df %>%
group_by(adshex) %>%
summarise(start = min(timestamp)) %>%
summarise(end = max(timestamp))
dur_df = sample_df %>%
group_by(adshex) %>%
summarise(start = min(timestamp),end = max(timestamp))
head(dur_df)
start_df = sample_df %>%
group_by(adshex) %>%
summarise(start = min(timestamp))
head(start_df)
head(input_file)
end_df = sample_df %>%
group_by(adshex) %>%
summarise(start = max(timestamp))
head(end_df)
start_df = sample_df %>%
group_by(adshex) %>%
summarize(start = min(timestamp))
head(start_df)
end_df = sample_df %>%
group_by(adshex) %>%
summarize(start = max(timestamp))
head(end_df)
head(start_df)
head(end_df)
str(input_file)
start_df = sample_df %>%
group_by(adshex) %>%
summarise(start = min(timestamp))
head(start_df)
end_df = sample_df %>%
group_by(adshex) %>%
summarise(end = max(timestamp))
head(end_df)
head(start_df)
head(end_df)
one_flight = input_file %>%
filter(adshex=="104cfff0")
str(one_flight)
head(one_flight)
head(one_flight)
segments = unique(one_flight$flight_id)
str(segments)
segments
init = min(one_flight$timestamp)
init
end = max(one_flight$timestamp)
end
one_flight
start_df = sample_df %>%
group_by(adshex) %>%
summarise(start = head(timestamp,1))
head(start_df)
end_df = sample_df %>%
group_by(adshex) %>%
summarise(end = tail(timestamp,1))
end_df
knitr::opts_chunk$set(echo = TRUE)
library(rjson)
library(dplyr)
library(tidyr)
library(ggmap)
library(ggplot2)
library(lubridate)
library(anytime)
library(sp)
library(tmaptools)
library(SpatialEpi)
library(Imap)
setwd("/Users/albertogonzalez/Documents/GitHub/mlearning/flights/eda_r")
list.files()
input_file =read.csv(file = "flights_output_take_one.csv")
head(input_file)
head(input_file)
sample_df = sample_n(input_file, 500)
str(sample_df)
dura_df = sample_df %>%
group_by(adshex) %>%
summarize(min_time = min(timestamp),max_time = max(timestamp))
head(dura_df)
head(dura_df)
one_flight = input_file %>%
filter(adshex=="104cfff0")
# Max and min timestamp
init = min(one_flight$timestamp)
one_flight
init
end = max(one_flight$timestamp)
end
head(one_flight)
head(one_flight)
table(one_flight$flight_id)
# Flight segments per flight
segments = as.data.frame(tabble(one_flight$flight_id))
# Flight segments per flight
segments = as.data.frame(tbble(one_flight$flight_id))
# Flight segments per flight
segments = as.data.frame(table(one_flight$flight_id))
str(segments)
head(segments)
head(segments)
segments = as.data.frame(table(one_flight$flight_id)) %>%
arrange(Freq) %>% head
segments
segments = as.data.frame(table(one_flight$flight_id)) %>%
arrange(desc(Freq)) %>%
head
segments
head(u_flights)
one_flight = input_file %>%
filter(adshex=="10542b98")
str(one_flight)
head(one_flight)
# Flight segments per flight
segments = as.data.frame(table(one_flight$flight_id)) %>%
arrange(desc(Freq)) %>%
head
segments
one_flight
segments
one_flight = input_file %>%
filter(adshex=="10534350")
segments = as.data.frame(table(one_flight$flight_id)) %>%
arrange(desc(Freq)) %>%
head
segments
segments
one_flight
segment_per_aircraft = input_file %>%
group_by(adshex,flight_id) %>%
summarise(length(flight_id))
segment_per_aircraft
segment_per_aircraft
se = as.data.frame(segment_per_aircraft)
head(se,20)
segment_per_aircraft = input_file %>%
group_by(adshex,flight_id) %>%
summarise(n = n())
se = as.data.frame(segment_per_aircraft)
head(se,20)
bbox
area_meters
area_km2
head(coords)
# Calculate steer: change in compass from previous transponder
# Calculated over track
head(one_flight)
head(one_flight)
head(one_flight)
steer = diff(one_flight$track)
head(steer,10)
head(steer,10)
str(sample_df)
dura_df = sample_df %>%
group_by(adshex) %>%
summarize(min_time = min(timestamp),max_time = max(timestamp))
head(dura_df)
library(rjson)
library(plyr)
library(dplyr)
library(tidyr)
library(ggmap)
library(ggplot2)
library(lubridate)
library(anytime)
library(sp)
library(tmaptools)
library(SpatialEpi)
library(Imap)
setwd("/Users/albertogonzalez/Documents/GitHub/mlearning/flights/eda_r")
list.files()
# Load data (substitute this by the random 500 files from Lucas DB)
input_file =read.csv(file = "flights_output_take_one.csv")
head(input_file)
# Count number of different aircrafts
n_crafts = length(unique(input_file$adshex))
n_crafts
foo = function(flight_df){
# Duration of that flight
init = min(flight_df$timestamp)
init = anytime(init)
end = max(flight_df$timestamp)
end = anytime(end)
dura = difftime(end,init,units="mins")
flight_df$duration = dura
flight_df
# Bounding box of that flight
xy <- flight_df[,c(3,4)]
min_coord = head(xy,1)
max_coord = tail(xy,1)
area_meters = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "m", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area_km2 = area_meters / 1000
flight_df$box_km2 = area_km2
# Calculate steer: change in compass from previous transponder
steer = diff(flight_df$track)
steer = as.data.frame(steer)
steer_2 = rbind(0,steer)
flight_df$steer = steer_2
flight_df
}
flights_rows = as.data.frame(table(input_file$adshex))
head(flights_rows)
one_flight = input_file %>%
filter(adshex=="10534350")
t = foo(one_flight)
t
# Run the function for all flights
df2 = ddply(input_file, ~ adshex, foo)
foo = function(flight_df){
# Duration of that flight
init = min(flight_df$timestamp)
init = anytime(init)
end = max(flight_df$timestamp)
end = anytime(end)
dura = difftime(end,init,units="mins")
flight_df$duration = dura
flight_df
# Bounding box of that flight
xy <- flight_df[,c(3,4)]
min_coord = head(xy,1)
max_coord = tail(xy,1)
area_meters = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "m", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area_km2 = area_meters / 1000
flight_df$box_km2 = area_km2
# Calculate steer: change in compass from previous transponder
steer = diff(flight_df$track)
steer = as.data.frame(steer)
steer_2 = rbind(0,steer)
steer_2 = data_frame(steer_2)
flight_df$steer = steer_2
flight_df
}
one_flight = input_file %>%
filter(adshex=="10534350")
t = foo(one_flight)
t
foo = function(flight_df){
# Duration of that flight
init = min(flight_df$timestamp)
init = anytime(init)
end = max(flight_df$timestamp)
end = anytime(end)
dura = difftime(end,init,units="mins")
flight_df$duration = dura
flight_df
# Bounding box of that flight
xy <- flight_df[,c(3,4)]
min_coord = head(xy,1)
max_coord = tail(xy,1)
area_meters = gdist(min_coord$lng,min_coord$lat,max_coord$lng,max_coord$lat, units = "m", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
area_km2 = area_meters / 1000
flight_df$box_km2 = area_km2
# Calculate steer: change in compass from previous transponder
steer = diff(flight_df$track)
steer = as.data.frame(steer)
steer_2 = rbind(0,steer)
flight_df$steer = steer_2
flight_df
}
one_flight = input_file %>%
filter(adshex=="10534350")
t = foo(one_flight)
t
# Run the function for all flights
df2 = ddply(input_file, ~ adshex, foo)
head8df2
head(df2)
